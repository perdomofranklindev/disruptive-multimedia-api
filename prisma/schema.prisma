generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin", "debian-openssl-1.1.x"]
}

generator typescriptInterfaces {
  provider  = "prisma-generator-typescript-interfaces"
  output    = "../src/shared/types/generated.ts"
  modelType = "interface"
  enumType  = "enum"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  username  String    @unique 
  email     String    @unique
  password  String
  role      Role      @relation(fields: [roleId], references: [id])
  roleId    String    @db.ObjectId
  sessions  Session[]
  Contents  Content[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Role {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  name        String           @unique
  title       String?
  description String?
  permissions PermissionType[]
  users       User[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
  expiredAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Theme {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  thumbnail String?
  content   Content[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Content {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  name              String            @unique
  description       String?
  thumbnail         String?
  theme             Theme?            @relation(fields: [themeId], references: [id])
  themeId           String?           @db.ObjectId
  permissions       PermissionType[]
  contentCategories ContentCategory[]
  userId            String            @db.ObjectId
  createdBy         User              @relation(fields: [userId], references: [id])
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model ContentCategory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  data       String
  content    Content? @relation(fields: [contentId], references: [id])
  contentId  String?  @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Category {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  name              String            @unique
  permissions       PermissionType[]
  ContentCategories ContentCategory[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model Task {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PermissionType {
  READ
  CREATE
  UPDATE
  DELETE
}

enum RoleType {
  READER
  CREATOR
  ADMINISTRATOR
}

enum CategoryType {
  TEXT
  IMAGE
  URL
  FILE
  VIDEO
}
