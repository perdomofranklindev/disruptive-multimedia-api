// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum PermissionType {
  READ
  CREATE
  UPDATE
  DELETE
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  username  String    @unique
  email     String    @unique
  password  String
  role      Role      @relation(fields: [roleId], references: [id])
  roleId    String    @db.ObjectId
  sessions  Session[]
  Content   Content[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Role {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  name        String           @unique
  label       String?
  note        String?
  permissions PermissionType[]
  users       User[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  expiresAt DateTime
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Theme {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  thumbnail String?
  content   Content[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Content {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  name            String            @unique
  description     String?
  thumbnail       String?
  theme           Theme?            @relation(fields: [themeId], references: [id])
  themeId         String?           @db.ObjectId
  permissions     PermissionType[]
  contentCategory ContentCategory[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  userId          String            @db.ObjectId
  createdBy       User              @relation(fields: [userId], references: [id])
}

model ContentCategory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  data       String
  content    Content? @relation(fields: [contentId], references: [id])
  contentId  String?  @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Category {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  name            String            @unique
  permissions     PermissionType[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  ContentCategory ContentCategory[]
}

model Task {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
}
